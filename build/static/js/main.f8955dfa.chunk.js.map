{"version":3,"sources":["logo.svg","utils/DrawData.js","configs/algorithms.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","drawDataOnCanvas","data","ctx","clearRect","fillStyle","console","log","i","length","fillRect","name","performance","App","canvasRef","useRef","useState","Array","map","Math","floor","random","chartData","alghoritms","sortingMethod","useEffect","current","getContext","className","color","width","height","ref","onClick","temp","x","setInterval","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,kC,2ICC9BC,G,MAAmB,SAACC,EAAKC,GAClCA,EAAIC,UAAU,EAAE,EAAE,KAAK,KACvBD,EAAIE,UAAW,UAEfC,QAAQC,IAAIL,GACZ,IAAK,IAAIM,EAAE,EAAGA,EAAEN,EAAKO,OAAQD,IACzBF,QAAQC,IAAIL,EAAKM,IACjBL,EAAIO,SAAS,EAAEF,EAAE,IAAIN,EAAKM,GAAG,EAAEN,EAAKM,MCR5B,GAAC,CACbG,KAAM,cACNC,YAAa,WCmDFC,MA9Cf,WACE,IAAMC,EAAYC,iBAAO,MADZ,EAEqBC,mBAAS,YAAIC,MAAM,MAAMC,KAAI,kBAAMC,KAAKC,MAAsB,IAAhBD,KAAKE,SAAiB,OAFzF,mBAENC,EAFM,aAG6BN,mBAASO,EAAW,KAHjD,mBAGNC,EAHM,KAITrB,GAJS,KAIH,IA2BV,OA1BAsB,qBAAU,WACRtB,EAAMW,EAAUY,QAAQC,WAAW,MACnC1B,EAAiBqB,EAAUnB,KAC1B,IAwBD,yBAAKyB,UAAU,OACb,kBAAC,SAAD,CAAQA,UAAU,SAASC,MAAM,QAC/B,2DAEF,4BAAKL,EAAcb,MACnB,4CAAkBa,EAAcZ,aAChC,kBAAC,UAAD,CAASgB,UAAU,QACjB,4BAAQE,MAAM,OAAOC,OAAO,MAAMH,UAAU,gBAAgBI,IAAKlB,KAEnE,kBAAC,SAAD,CAAQc,UAAU,SAASK,QAhClB,WAIX,IAHA,IACIC,EACAhC,EAAOoB,EACFa,EAAI,EAAGA,EAAIjC,EAAKO,OAAQ0B,IAC7BC,aAAY,WACRlC,EAAOoB,GACG,EACV,IAAK,IAAId,EAAI,EAAGA,EAAIN,EAAKO,OAAQD,IACzBN,EAAKM,EAAE,GAAKN,EAAKM,KACjB0B,EAAOhC,EAAKM,GACZN,EAAKM,GAAKN,EAAKM,EAAE,GACjBN,EAAKM,EAAE,GAAK0B,GACF,GAGlBjC,EAAiBC,EAAKC,KACxB,IAAKgC,EAAE,KAGb7B,QAAQC,IAAIL,IAYgC2B,MAAM,QAAhD,eAAoEL,EAAcb,KAAlF,OCpCc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,a","file":"static/js/main.f8955dfa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nexport const drawDataOnCanvas = (data,ctx) => {\n    ctx.clearRect(0,0,1200,400)\n    ctx.fillStyle ='#3273dc';\n    // ctx.fillRect(100,100,100,100)\n    console.log(data)\n    for (let i=0; i<data.length; i++){\n        console.log(data[i])\n        ctx.fillRect(4*i,400-data[i],8,data[i])\n    }\n}\n","export default  [{\n    name: 'Bubble Sort',\n    performance: 'O(n^2)'\n}]","import React, {useRef,useEffect,useState} from 'react';\nimport logo from './logo.svg';\nimport 'react-bulma-components/dist/react-bulma-components.min.css';\nimport { Navbar,Section,Button, NavbarBrand } from 'react-bulma-components';\nimport './App.css';\nimport { drawDataOnCanvas } from './utils/DrawData';\nimport alghoritms from './configs/algorithms';\nfunction App() {\n  const canvasRef = useRef(null);\n  const [chartData, setChartData] = useState([...Array(300)].map(() => Math.floor(Math.random() * 380 + 5)));\n  const [sortingMethod, setSortingMethod] = useState(alghoritms[0])\n  let ctx = '';\n  useEffect(() => {\n    ctx = canvasRef.current.getContext('2d');\n    drawDataOnCanvas(chartData,ctx);\n  }, [])\n  const sort = () => {\n    let changed;\n    let temp;\n    let data = chartData;\n    for (let x = 0; x < data.length; x++){\n        setInterval(()=>{\n            data = chartData;\n            changed = false;\n            for (let i = 0; i < data.length; i++){\n                if (data[i-1] > data[i]){\n                    temp = data[i];\n                    data[i] = data[i-1];\n                    data[i-1] = temp;\n                    changed = true;\n                }\n            }\n            drawDataOnCanvas(data,ctx);\n        },2000*x+100)\n\n    }\n    console.log(data)\n  }\n  return (\n    <div className=\"App\">\n      <Navbar className='navbar' color='link'>\n        <h1>Sort alghoritms visualised</h1>\n      </Navbar>\n      <h2>{sortingMethod.name}</h2>\n      <h3>Performance: {sortingMethod.performance}</h3>\n      <Section className='main'>\n        <canvas width='1200' height='400' className='canvasElement' ref={canvasRef}></canvas>\n      </Section>\n      <Button className='button' onClick={sort} color='link'>Sort using: {sortingMethod.name} </Button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}