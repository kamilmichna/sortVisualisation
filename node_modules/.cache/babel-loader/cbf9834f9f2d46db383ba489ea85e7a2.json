{"ast":null,"code":"const swap = (items, leftIndex, rightIndex) => {\n  var temp = items[leftIndex];\n  items[leftIndex] = items[rightIndex];\n  items[rightIndex] = temp;\n};\n\nconst partition = (items, left, right) => {\n  var pivot = items[Math.floor((right + left) / 2)],\n      //middle element\n  i = left,\n      //left pointer\n  j = right; //right pointer\n\n  while (i <= j) {\n    while (items[i] < pivot) {\n      i++;\n    }\n\n    while (items[j] > pivot) {\n      j--;\n    }\n\n    if (i <= j) {\n      swap(items, i, j); //sawpping two elements\n\n      i++;\n      j--;\n    }\n  }\n\n  return i;\n};\n\nconst quickSort = (items, left, right) => {\n  var index;\n\n  if (items.length > 1) {\n    index = partition(items, left, right); //index returned from partition\n\n    if (left < index - 1) {\n      //more elements on the left side of the pivot\n      quickSort(items, left, index - 1);\n    }\n\n    if (index < right) {\n      //more elements on the right side of the pivot\n      quickSort(items, index, right);\n    }\n  }\n\n  return items;\n};","map":{"version":3,"sources":["/media/kamil/b7319a4f-ac8a-4e58-90d7-c6cf95693042/programowanie/webdev/sortVisualisation/src/sortStrategies/quickSort.js"],"names":["swap","items","leftIndex","rightIndex","temp","partition","left","right","pivot","Math","floor","i","j","quickSort","index","length"],"mappings":"AAAA,MAAMA,IAAI,GAAG,CAACC,KAAD,EAAQC,SAAR,EAAmBC,UAAnB,KAAkC;AAC3C,MAAIC,IAAI,GAAGH,KAAK,CAACC,SAAD,CAAhB;AACAD,EAAAA,KAAK,CAACC,SAAD,CAAL,GAAmBD,KAAK,CAACE,UAAD,CAAxB;AACAF,EAAAA,KAAK,CAACE,UAAD,CAAL,GAAoBC,IAApB;AACH,CAJD;;AAKA,MAAMC,SAAS,GAAG,CAACJ,KAAD,EAAQK,IAAR,EAAcC,KAAd,KAAwB;AACtC,MAAIC,KAAK,GAAKP,KAAK,CAACQ,IAAI,CAACC,KAAL,CAAW,CAACH,KAAK,GAAGD,IAAT,IAAiB,CAA5B,CAAD,CAAnB;AAAA,MAAqD;AACjDK,EAAAA,CAAC,GAASL,IADd;AAAA,MACoB;AAChBM,EAAAA,CAAC,GAASL,KAFd,CADsC,CAGjB;;AACrB,SAAOI,CAAC,IAAIC,CAAZ,EAAe;AACX,WAAOX,KAAK,CAACU,CAAD,CAAL,GAAWH,KAAlB,EAAyB;AACrBG,MAAAA,CAAC;AACJ;;AACD,WAAOV,KAAK,CAACW,CAAD,CAAL,GAAWJ,KAAlB,EAAyB;AACrBI,MAAAA,CAAC;AACJ;;AACD,QAAID,CAAC,IAAIC,CAAT,EAAY;AACRZ,MAAAA,IAAI,CAACC,KAAD,EAAQU,CAAR,EAAWC,CAAX,CAAJ,CADQ,CACW;;AACnBD,MAAAA,CAAC;AACDC,MAAAA,CAAC;AACJ;AACJ;;AACD,SAAOD,CAAP;AACH,CAlBD;;AAoBA,MAAME,SAAS,GAAG,CAACZ,KAAD,EAAQK,IAAR,EAAcC,KAAd,KAAwB;AACtC,MAAIO,KAAJ;;AACA,MAAIb,KAAK,CAACc,MAAN,GAAe,CAAnB,EAAsB;AAClBD,IAAAA,KAAK,GAAGT,SAAS,CAACJ,KAAD,EAAQK,IAAR,EAAcC,KAAd,CAAjB,CADkB,CACqB;;AACvC,QAAID,IAAI,GAAGQ,KAAK,GAAG,CAAnB,EAAsB;AAAE;AACpBD,MAAAA,SAAS,CAACZ,KAAD,EAAQK,IAAR,EAAcQ,KAAK,GAAG,CAAtB,CAAT;AACH;;AACD,QAAIA,KAAK,GAAGP,KAAZ,EAAmB;AAAE;AACjBM,MAAAA,SAAS,CAACZ,KAAD,EAAQa,KAAR,EAAeP,KAAf,CAAT;AACH;AACJ;;AACD,SAAON,KAAP;AACH,CAZD","sourcesContent":["const swap = (items, leftIndex, rightIndex) => {\n    var temp = items[leftIndex];\n    items[leftIndex] = items[rightIndex];\n    items[rightIndex] = temp;\n}\nconst partition = (items, left, right) => {\n    var pivot   = items[Math.floor((right + left) / 2)], //middle element\n        i       = left, //left pointer\n        j       = right; //right pointer\n    while (i <= j) {\n        while (items[i] < pivot) {\n            i++;\n        }\n        while (items[j] > pivot) {\n            j--;\n        }\n        if (i <= j) {\n            swap(items, i, j); //sawpping two elements\n            i++;\n            j--;\n        }\n    }\n    return i;\n}\n\nconst quickSort = (items, left, right) => {\n    var index;\n    if (items.length > 1) {\n        index = partition(items, left, right); //index returned from partition\n        if (left < index - 1) { //more elements on the left side of the pivot\n            quickSort(items, left, index - 1);\n        }\n        if (index < right) { //more elements on the right side of the pivot\n            quickSort(items, index, right);\n        }\n    }\n    return items;\n}"]},"metadata":{},"sourceType":"module"}