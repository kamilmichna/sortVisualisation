{"version":3,"sources":["logo.svg","utils/DrawData.js","sortStrategies/selectionSort.js","configs/algorithms.js","sortStrategies/bubbleSort.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","drawDataOnCanvas","data","ctx","clearRect","fillStyle","i","length","fillRect","Array","prototype","swap","x","y","b","this","name","performance","sortingFunction","chartData","temp","setInterval","console","log","min","j","App","canvasRef","useRef","useState","map","Math","floor","random","alghoritms","sortingMethod","setSortingMethod","useEffect","current","getContext","className","color","onChange","e","algo","filter","el","target","value","width","height","ref","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,kC,2ICC9BC,G,MAAmB,SAACC,EAAKC,GAClCA,EAAIC,UAAU,EAAE,EAAE,KAAK,KACvBD,EAAIE,UAAW,UAEf,IAAK,IAAIC,EAAE,EAAGA,EAAEJ,EAAKK,OAAQD,IACzBH,EAAIK,SAAS,EAAEF,EAAE,IAAIJ,EAAKI,GAAG,EAAEJ,EAAKI,MCJ5CG,MAAMC,UAAUC,KAAO,SAAUC,EAAGC,GAChC,IAAIC,EAAIC,KAAKH,GAGb,OAFAG,KAAKH,GAAKG,KAAKF,GACfE,KAAKF,GAAKC,EACHC,MAGI,ICPC,GAAC,CACbC,KAAM,cACNC,YAAa,SACbC,gBCJY,SAACf,EAAIgB,GAGjB,IAFA,IAAIC,EACAlB,EAAOiB,EACFP,EAAI,EAAGA,EAAIV,EAAKK,OAAQK,IAC7BS,aAAY,WACRnB,EAAOiB,EAEP,IADA,IACSb,EAAI,EAAGA,EAAIJ,EAAKK,OAAQD,IACzBJ,EAAKI,EAAE,GAAKJ,EAAKI,KACjBc,EAAOlB,EAAKI,GACZJ,EAAKI,GAAKJ,EAAKI,EAAE,GACjBJ,EAAKI,EAAE,GAAKc,GACF,GAGlBnB,EAAiBC,EAAKC,KACxB,IAAKS,EAAE,KAGbU,QAAQC,IAAIrB,KDbhB,CACIc,KAAM,iBACNC,YAAa,SACbC,gBDDW,SAACf,EAAIgB,GAEhB,IADA,IAAIjB,EAAOiB,EADmB,WAErBb,GACLe,aAAY,WAER,IADA,IAAIG,EAAMlB,EACDmB,EAAInB,EAAI,EAAGmB,EAAIvB,EAAKK,OAAQkB,IAC7BvB,EAAKuB,GAAKvB,EAAKsB,KACfA,EAAMC,GAGVD,IAAQlB,GACRJ,EAAKS,KAAKL,EAAGkB,GAEjBvB,EAAiBC,EAAKC,KACxB,IAAIG,IAZDA,EAAI,EAAGA,EAAIJ,EAAKK,OAAS,EAAGD,IAAM,EAAlCA,MGoCEoB,MAxCf,WACE,IAAMC,EAAYC,iBAAO,MADZ,EAEqBC,mBAAS,YAAIpB,MAAM,MAAMqB,KAAI,kBAAMC,KAAKC,MAAsB,IAAhBD,KAAKE,SAAiB,OAFzF,mBAENd,EAFM,aAG6BU,mBAASK,EAAW,KAHjD,mBAGNC,EAHM,KAGSC,EAHT,KAITjC,EAAM,GAWV,OAVAkC,qBAAU,WACRlC,EAAMwB,EAAUW,QAAQC,WAAW,MACnCtC,EAAiBkB,EAAUhB,KAC1B,CAACA,EAAIgC,IAQN,yBAAKK,UAAU,OACb,kBAAC,SAAD,CAAQA,UAAU,SAASC,MAAM,QAC/B,2DAEF,yBAAKD,UAAU,iBACb,4BAAKL,EAAcnB,MACnB,4CAAkBmB,EAAclB,aAChC,qDACA,4BAAQyB,SAdS,SAACC,GACtBrB,QAAQC,IAAIpB,GACZ,IAAIyC,EAAOV,EAAWW,QAAO,SAAAC,GAAE,OAAEA,EAAG9B,OAAO2B,EAAEI,OAAOC,SAAO,GAC3DZ,EAAiBQ,KAYTV,EAAWJ,KAAI,SAAAgB,GACb,OACE,gCAASA,EAAG9B,WAKtB,kBAAC,UAAD,CAASwB,UAAU,QACjB,4BAAQS,MAAM,OAAOC,OAAO,MAAMV,UAAU,gBAAgBW,IAAKxB,KAEnE,kBAAC,SAAD,CAAQa,UAAU,SAASY,QAAS,kBAAMjB,EAAcjB,gBAAgBf,EAAIgB,IAAYsB,MAAM,QAA9F,eAAkHN,EAAcnB,KAAhI,OC9BcqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,a","file":"static/js/main.c23155d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nexport const drawDataOnCanvas = (data,ctx) => {\n    ctx.clearRect(0,0,1200,400)\n    ctx.fillStyle ='#3273dc';\n    // ctx.fillRect(100,100,100,100)\n    for (let i=0; i<data.length; i++){\n        ctx.fillRect(4*i,400-data[i],8,data[i])\n    }\n}\n","import {drawDataOnCanvas} from  '../utils/DrawData';\n\nArray.prototype.swap = function (x, y) {\n    var b = this[x];\n    this[x] = this[y];\n    this[y] = b;\n    return this;\n};\n\nexport default (ctx,chartData) => {\n    let data = chartData;\n    for (let i = 0; i < data.length - 1; i++) {\n        setInterval(()=>{       \n            var min = i;\n            for (var j = i + 1; j < data.length; j++) {\n                if (data[j] < data[min]) {\n                    min = j;\n                }\n            }\n            if (min !== i) {\n                data.swap(i, min);\n            }\n            drawDataOnCanvas(data,ctx);\n        },500*i)\n    }\n}","import bubbleSort from '../sortStrategies/bubbleSort'\nimport selectionSort from '../sortStrategies/selectionSort';\nexport default  [{\n    name: 'Bubble Sort',\n    performance: 'O(n^2)',\n    sortingFunction: bubbleSort\n},\n{\n    name: 'Selection Sort',\n    performance: 'O(n^2)',\n    sortingFunction: selectionSort\n}]","import {drawDataOnCanvas} from  '../utils/DrawData';\nexport default  (ctx,chartData) => {\n    let temp;\n    let data = chartData;\n    for (let x = 0; x < data.length; x++){\n        setInterval(()=>{\n            data = chartData;\n            let changed = false;\n            for (let i = 0; i < data.length; i++){\n                if (data[i-1] > data[i]){\n                    temp = data[i];\n                    data[i] = data[i-1];\n                    data[i-1] = temp;\n                    changed = true;\n                }\n            }\n            drawDataOnCanvas(data,ctx);\n        },2000*x+100)\n\n    }\n    console.log(data)\n}","import React, {useRef,useEffect,useState} from 'react';\nimport logo from './logo.svg';\nimport 'react-bulma-components/dist/react-bulma-components.min.css';\nimport { Navbar, Section, Button, Field, Control, Label } from 'react-bulma-components';\nimport './App.css';\nimport { drawDataOnCanvas } from './utils/DrawData';\nimport alghoritms from './configs/algorithms';\nfunction App() {\n  const canvasRef = useRef(null);\n  const [chartData, setChartData] = useState([...Array(300)].map(() => Math.floor(Math.random() * 380 + 5)));\n  const [sortingMethod, setSortingMethod] = useState(alghoritms[0])\n  let ctx = '';\n  useEffect(() => {\n    ctx = canvasRef.current.getContext('2d');\n    drawDataOnCanvas(chartData,ctx);\n  }, [ctx,sortingMethod])\n\n  const onSelectChange = (e) => {\n    console.log(ctx)\n    let algo = alghoritms.filter(el=>el.name===e.target.value)[0];\n    setSortingMethod(algo);\n  }\n  return (\n    <div className=\"App\">\n      <Navbar className='navbar' color='link'>\n        <h1>Sort alghoritms visualised</h1>\n      </Navbar>\n      <div className='dataContainer'>\n        <h2>{sortingMethod.name}</h2>\n        <h3>Performance: {sortingMethod.performance}</h3>\n        <label>Select sort type: </label>\n        <select onChange={onSelectChange}>\n          { alghoritms.map(el=>{\n              return (\n                <option>{el.name}</option>\n              )\n          })}\n        </select>\n      </div>\n      <Section className='main'>\n        <canvas width='1200' height='400' className='canvasElement' ref={canvasRef}></canvas>\n      </Section>\n      <Button className='button' onClick={() => sortingMethod.sortingFunction(ctx,chartData)} color='link'>Sort using: {sortingMethod.name} </Button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}